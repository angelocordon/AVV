html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

body {
  margin: 0; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

audio, canvas, progress, video {
  display: inline-block;
  vertical-align: baseline; }

audio:not([controls]) {
  display: none;
  height: 0; }

[hidden], template {
  display: none; }

a {
  background: 0 0; }

a:active, a:hover {
  outline: 0; }

abbr[title] {
  border-bottom: 1px dotted; }

b, strong {
  font-weight: 700; }

dfn {
  font-style: italic; }

h1 {
  font-size: 2em;
  margin: .67em 0; }

mark {
  background: #ff0;
  color: #000; }

small {
  font-size: 80%; }

sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -.5em; }

sub {
  bottom: -.25em; }

img {
  border: 0; }

svg:not(:root) {
  overflow: hidden; }

figure {
  margin: 1em 40px; }

hr {
  box-sizing: content-box;
  height: 0; }

pre {
  overflow: auto; }

code, kbd, pre, samp {
  font-family: monospace,monospace;
  font-size: 1em; }

button, input, optgroup, select, textarea {
  color: inherit;
  font: inherit;
  margin: 0; }

button {
  overflow: visible; }

button, select {
  text-transform: none; }

button, html input[type=button], input[type=reset], input[type=submit] {
  -webkit-appearance: button;
  cursor: pointer; }

button[disabled], html input[disabled] {
  cursor: default; }

button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

input {
  line-height: normal; }

input[type=checkbox], input[type=radio] {
  box-sizing: border-box;
  padding: 0; }

input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button {
  height: auto; }

input[type=search] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }

input[type=search]::-webkit-search-cancel-button, input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none; }

fieldset {
  border: 1px solid silver;
  margin: 0 2px;
  padding: .35em .625em .75em; }

legend {
  border: 0;
  padding: 0; }

textarea {
  overflow: auto; }

optgroup {
  font-weight: 700; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

*, *:before, *:after {
  box-sizing: border-box; }

html {
  overflow-x: hidden;
  webkit-font-smoothing: antialiased;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.004); }

body {
  background: #191919;
  color: #fff;
  font-family: 'Open Sans', sans-serif;
  font-size: 14px;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.004); }

a {
  text-decoration: none;
  color: #fff; }
  a:hover {
    border-bottom: 2px solid #d18ba7; }

h1 {
  width: 100%;
  display: block; }

p {
  font-weight: normal; }

main {
  padding: 60px 30px 0; }

@media (min-width: 1024px) {
  .main, .content {
    width: 83.05085%;
    float: left;
    margin-right: 1.69492%;
    margin-left: 8.47458%; } }

header {
  padding: 20vh 0 0; }
  header h1 {
    text-transform: uppercase;
    font-size: 2.7em;
    font-weight: 700;
    line-height: 1.2; }
    @media (min-width: 1024px) {
      header h1 {
        font-size: 5em; } }
  header p {
    font-size: 18px;
    font-weight: 400; }

.nav {
  width: 100%;
  height: 60px;
  line-height: 60px;
  position: absolute;
  padding: 0 30px; }
  .nav a {
    display: inline-block;
    height: 60px;
    min-width: 44px; }

.navicon {
  font-size: 3.5em; }
  .navicon:hover {
    border: none; }
  @media (min-width: 800px) {
    .navicon {
      display: none !important; } }

.menu {
  display: none;
  background: rgba(0, 0, 0, 0.9);
  text-align: center;
  text-transform: uppercase;
  font-weight: 600;
  font-size: 0.9em;
  position: absolute;
  width: 100%;
  height: 100vh;
  top: 0px;
  left: 0px;
  z-index: 40; }
  .menu .brand::before {
    font-size: 1.5em; }
  .menu a.brand:hover {
    border: none !important; }
  .menu a {
    display: block;
    vertical-align: middle; }
  .menu .chat i {
    font-size: 1.5em;
    margin-right: 5px;
    vertical-align: middle; }
  @media (min-width: 800px) {
    .menu {
      display: inline-block;
      background: none;
      height: 60px;
      line-height: 60px;
      position: relative;
      text-align: left; }
      .menu a {
        display: inline;
        margin-right: 40px; }
        .menu a:last-child {
          margin-right: 0; }
      .menu .brand::before {
        content: 'A Vivid Visual';
        margin-right: 20px; }
      .menu .chat {
        float: right;
        height: 40px; } }

.active {
  display: block; }

.naviclose {
  height: 60px;
  display: block;
  float: left;
  margin-left: 30px; }
  .naviclose i {
    font-size: 2.5em;
    vertical-align: middle; }
  @media (min-width: 800px) {
    .naviclose {
      display: none !important; } }

.footer {
  background: none;
  height: 60px;
  line-height: 60px;
  margin-top: -60px;
  text-align: right;
  font-size: 1.8em;
  padding: 0 30px; }
  .footer i {
    margin-left: 20px; }
  .footer a {
    color: rgba(255, 255, 255, 0.5); }
  .footer a:hover {
    border: none;
    color: white; }

.home, .work {
  background: url("../img/landing-bg.jpg") no-repeat;
  background-size: cover;
  background-position: center;
  min-height: 100vh;
  overflow: hidden; }
  @media (min-width: 1024px) {
    .home, .work {
      background-position: top center; } }

.continue {
  display: block;
  margin: 0 auto;
  width: 100px;
  height: 40px;
  line-height: 40px;
  text-align: center;
  font-size: 12px;
  text-transform: uppercase;
  font-weight: 700; }
  .continue .ion-ios-arrow-thin-right {
    font-size: 2.5em;
    margin-left: -5px; }
  .continue span {
    display: inline-block;
    margin-left: 5px;
    position: relative;
    top: -6px; }

.work {
  background: url("../img/work-bg.jpg") no-repeat;
  background-size: contain;
  background-position: center;
  min-height: 100vh;
  overflow: hidden; }
  @media (min-width: 1024px) {
    .work {
      background-position: top center; } }

.card {
  display: inline-block;
  max-width: 380px;
  margin: 20px; }

.thumbnail {
  width: 100%;
  height: 253px; }

/*# sourceMappingURL=data:application/json;base64, */
